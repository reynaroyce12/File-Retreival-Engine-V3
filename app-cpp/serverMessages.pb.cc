// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: serverMessages.proto

#include "serverMessages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR IndexRequest_WordFrequenciesEntry_DoNotUse::IndexRequest_WordFrequenciesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct IndexRequest_WordFrequenciesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IndexRequest_WordFrequenciesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IndexRequest_WordFrequenciesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    IndexRequest_WordFrequenciesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IndexRequest_WordFrequenciesEntry_DoNotUseDefaultTypeInternal _IndexRequest_WordFrequenciesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR IndexRequest::IndexRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.word_frequencies_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.client_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.document_path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IndexRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IndexRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IndexRequestDefaultTypeInternal() {}
  union {
    IndexRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IndexRequestDefaultTypeInternal _IndexRequest_default_instance_;
PROTOBUF_CONSTEXPR IndexReply::IndexReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.document_number_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IndexReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IndexReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IndexReplyDefaultTypeInternal() {}
  union {
    IndexReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IndexReplyDefaultTypeInternal _IndexReply_default_instance_;
PROTOBUF_CONSTEXPR SearchRequest::SearchRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.terms_)*/{}
  , /*decltype(_impl_.logical_operators_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SearchRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SearchRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SearchRequestDefaultTypeInternal() {}
  union {
    SearchRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SearchRequestDefaultTypeInternal _SearchRequest_default_instance_;
PROTOBUF_CONSTEXPR SearchReply_Document::SearchReply_Document(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.document_path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.client_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.frequency_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SearchReply_DocumentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SearchReply_DocumentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SearchReply_DocumentDefaultTypeInternal() {}
  union {
    SearchReply_Document _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SearchReply_DocumentDefaultTypeInternal _SearchReply_Document_default_instance_;
PROTOBUF_CONSTEXPR SearchReply::SearchReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.documents_)*/{}
  , /*decltype(_impl_.execution_time_)*/0
  , /*decltype(_impl_.total_results_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SearchReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SearchReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SearchReplyDefaultTypeInternal() {}
  union {
    SearchReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SearchReplyDefaultTypeInternal _SearchReply_default_instance_;
PROTOBUF_CONSTEXPR ServerMessage::ServerMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.index_request_)*/nullptr
  , /*decltype(_impl_.search_request_)*/nullptr
  , /*decltype(_impl_.index_reply_)*/nullptr
  , /*decltype(_impl_.search_reply_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerMessageDefaultTypeInternal() {}
  union {
    ServerMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerMessageDefaultTypeInternal _ServerMessage_default_instance_;
static ::_pb::Metadata file_level_metadata_serverMessages_2eproto[7];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_serverMessages_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_serverMessages_2eproto = nullptr;

const uint32_t TableStruct_serverMessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::IndexRequest_WordFrequenciesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::IndexRequest_WordFrequenciesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::IndexRequest_WordFrequenciesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::IndexRequest_WordFrequenciesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndexRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::IndexRequest, _impl_.client_id_),
  PROTOBUF_FIELD_OFFSET(::IndexRequest, _impl_.document_path_),
  PROTOBUF_FIELD_OFFSET(::IndexRequest, _impl_.word_frequencies_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndexReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::IndexReply, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::IndexReply, _impl_.document_number_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SearchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SearchRequest, _impl_.terms_),
  PROTOBUF_FIELD_OFFSET(::SearchRequest, _impl_.logical_operators_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SearchReply_Document, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SearchReply_Document, _impl_.document_path_),
  PROTOBUF_FIELD_OFFSET(::SearchReply_Document, _impl_.frequency_),
  PROTOBUF_FIELD_OFFSET(::SearchReply_Document, _impl_.client_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SearchReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SearchReply, _impl_.documents_),
  PROTOBUF_FIELD_OFFSET(::SearchReply, _impl_.total_results_),
  PROTOBUF_FIELD_OFFSET(::SearchReply, _impl_.execution_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ServerMessage, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::ServerMessage, _impl_.index_request_),
  PROTOBUF_FIELD_OFFSET(::ServerMessage, _impl_.search_request_),
  PROTOBUF_FIELD_OFFSET(::ServerMessage, _impl_.index_reply_),
  PROTOBUF_FIELD_OFFSET(::ServerMessage, _impl_.search_reply_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::IndexRequest_WordFrequenciesEntry_DoNotUse)},
  { 10, -1, -1, sizeof(::IndexRequest)},
  { 19, -1, -1, sizeof(::IndexReply)},
  { 27, -1, -1, sizeof(::SearchRequest)},
  { 35, -1, -1, sizeof(::SearchReply_Document)},
  { 44, -1, -1, sizeof(::SearchReply)},
  { 53, -1, -1, sizeof(::ServerMessage)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_IndexRequest_WordFrequenciesEntry_DoNotUse_default_instance_._instance,
  &::_IndexRequest_default_instance_._instance,
  &::_IndexReply_default_instance_._instance,
  &::_SearchRequest_default_instance_._instance,
  &::_SearchReply_Document_default_instance_._instance,
  &::_SearchReply_default_instance_._instance,
  &::_ServerMessage_default_instance_._instance,
};

const char descriptor_table_protodef_serverMessages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024serverMessages.proto\"\256\001\n\014IndexRequest\022"
  "\021\n\tclient_id\030\001 \001(\t\022\025\n\rdocument_path\030\002 \001("
  "\t\022<\n\020word_frequencies\030\003 \003(\0132\".IndexReque"
  "st.WordFrequenciesEntry\0326\n\024WordFrequenci"
  "esEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\005:\0028\001\""
  "5\n\nIndexReply\022\016\n\006status\030\001 \001(\t\022\027\n\017documen"
  "t_number\030\002 \001(\003\"9\n\rSearchRequest\022\r\n\005terms"
  "\030\001 \003(\t\022\031\n\021logical_operators\030\002 \003(\t\"\257\001\n\013Se"
  "archReply\022(\n\tdocuments\030\001 \003(\0132\025.SearchRep"
  "ly.Document\022\025\n\rtotal_results\030\002 \001(\005\022\026\n\016ex"
  "ecution_time\030\003 \001(\001\032G\n\010Document\022\025\n\rdocume"
  "nt_path\030\001 \001(\t\022\021\n\tfrequency\030\002 \001(\005\022\021\n\tclie"
  "nt_id\030\003 \001(\t\"\260\002\n\rServerMessage\022(\n\004type\030\001 "
  "\001(\0162\032.ServerMessage.MessageType\022$\n\rindex"
  "_request\030\002 \001(\0132\r.IndexRequest\022&\n\016search_"
  "request\030\003 \001(\0132\016.SearchRequest\022 \n\013index_r"
  "eply\030\004 \001(\0132\013.IndexReply\022\"\n\014search_reply\030"
  "\005 \001(\0132\014.SearchReply\"a\n\013MessageType\022\021\n\rIN"
  "DEX_REQUEST\020\000\022\022\n\016SEARCH_REQUEST\020\001\022\017\n\013IND"
  "EX_REPLY\020\002\022\020\n\014SEARCH_REPLY\020\003\022\010\n\004QUIT\020\004b\006"
  "proto3"
  ;
static ::_pbi::once_flag descriptor_table_serverMessages_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_serverMessages_2eproto = {
    false, false, 806, descriptor_table_protodef_serverMessages_2eproto,
    "serverMessages.proto",
    &descriptor_table_serverMessages_2eproto_once, nullptr, 0, 7,
    schemas, file_default_instances, TableStruct_serverMessages_2eproto::offsets,
    file_level_metadata_serverMessages_2eproto, file_level_enum_descriptors_serverMessages_2eproto,
    file_level_service_descriptors_serverMessages_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_serverMessages_2eproto_getter() {
  return &descriptor_table_serverMessages_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_serverMessages_2eproto(&descriptor_table_serverMessages_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerMessage_MessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_serverMessages_2eproto);
  return file_level_enum_descriptors_serverMessages_2eproto[0];
}
bool ServerMessage_MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ServerMessage_MessageType ServerMessage::INDEX_REQUEST;
constexpr ServerMessage_MessageType ServerMessage::SEARCH_REQUEST;
constexpr ServerMessage_MessageType ServerMessage::INDEX_REPLY;
constexpr ServerMessage_MessageType ServerMessage::SEARCH_REPLY;
constexpr ServerMessage_MessageType ServerMessage::QUIT;
constexpr ServerMessage_MessageType ServerMessage::MessageType_MIN;
constexpr ServerMessage_MessageType ServerMessage::MessageType_MAX;
constexpr int ServerMessage::MessageType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

IndexRequest_WordFrequenciesEntry_DoNotUse::IndexRequest_WordFrequenciesEntry_DoNotUse() {}
IndexRequest_WordFrequenciesEntry_DoNotUse::IndexRequest_WordFrequenciesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void IndexRequest_WordFrequenciesEntry_DoNotUse::MergeFrom(const IndexRequest_WordFrequenciesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata IndexRequest_WordFrequenciesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_serverMessages_2eproto_getter, &descriptor_table_serverMessages_2eproto_once,
      file_level_metadata_serverMessages_2eproto[0]);
}

// ===================================================================

class IndexRequest::_Internal {
 public:
};

IndexRequest::IndexRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &IndexRequest::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:IndexRequest)
}
IndexRequest::IndexRequest(const IndexRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IndexRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.word_frequencies_)*/{}
    , decltype(_impl_.client_id_){}
    , decltype(_impl_.document_path_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.word_frequencies_.MergeFrom(from._impl_.word_frequencies_);
  _impl_.client_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_client_id().empty()) {
    _this->_impl_.client_id_.Set(from._internal_client_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.document_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.document_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_document_path().empty()) {
    _this->_impl_.document_path_.Set(from._internal_document_path(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:IndexRequest)
}

inline void IndexRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.word_frequencies_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.client_id_){}
    , decltype(_impl_.document_path_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.client_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.document_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.document_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IndexRequest::~IndexRequest() {
  // @@protoc_insertion_point(destructor:IndexRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void IndexRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.word_frequencies_.Destruct();
  _impl_.word_frequencies_.~MapField();
  _impl_.client_id_.Destroy();
  _impl_.document_path_.Destroy();
}

void IndexRequest::ArenaDtor(void* object) {
  IndexRequest* _this = reinterpret_cast< IndexRequest* >(object);
  _this->_impl_.word_frequencies_.Destruct();
}
void IndexRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IndexRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:IndexRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.word_frequencies_.Clear();
  _impl_.client_id_.ClearToEmpty();
  _impl_.document_path_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IndexRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_client_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "IndexRequest.client_id"));
        } else
          goto handle_unusual;
        continue;
      // string document_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_document_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "IndexRequest.document_path"));
        } else
          goto handle_unusual;
        continue;
      // map<string, int32> word_frequencies = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.word_frequencies_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IndexRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndexRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string client_id = 1;
  if (!this->_internal_client_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_id().data(), static_cast<int>(this->_internal_client_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndexRequest.client_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_client_id(), target);
  }

  // string document_path = 2;
  if (!this->_internal_document_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_document_path().data(), static_cast<int>(this->_internal_document_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndexRequest.document_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_document_path(), target);
  }

  // map<string, int32> word_frequencies = 3;
  if (!this->_internal_word_frequencies().empty()) {
    using MapType = ::_pb::Map<std::string, int32_t>;
    using WireHelper = IndexRequest_WordFrequenciesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_word_frequencies();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "IndexRequest.WordFrequenciesEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndexRequest)
  return target;
}

size_t IndexRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndexRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, int32> word_frequencies = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_word_frequencies_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >::const_iterator
      it = this->_internal_word_frequencies().begin();
      it != this->_internal_word_frequencies().end(); ++it) {
    total_size += IndexRequest_WordFrequenciesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string client_id = 1;
  if (!this->_internal_client_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_id());
  }

  // string document_path = 2;
  if (!this->_internal_document_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_document_path());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IndexRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IndexRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IndexRequest::GetClassData() const { return &_class_data_; }


void IndexRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IndexRequest*>(&to_msg);
  auto& from = static_cast<const IndexRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:IndexRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.word_frequencies_.MergeFrom(from._impl_.word_frequencies_);
  if (!from._internal_client_id().empty()) {
    _this->_internal_set_client_id(from._internal_client_id());
  }
  if (!from._internal_document_path().empty()) {
    _this->_internal_set_document_path(from._internal_document_path());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IndexRequest::CopyFrom(const IndexRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndexRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexRequest::IsInitialized() const {
  return true;
}

void IndexRequest::InternalSwap(IndexRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.word_frequencies_.InternalSwap(&other->_impl_.word_frequencies_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.client_id_, lhs_arena,
      &other->_impl_.client_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.document_path_, lhs_arena,
      &other->_impl_.document_path_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata IndexRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_serverMessages_2eproto_getter, &descriptor_table_serverMessages_2eproto_once,
      file_level_metadata_serverMessages_2eproto[1]);
}

// ===================================================================

class IndexReply::_Internal {
 public:
};

IndexReply::IndexReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:IndexReply)
}
IndexReply::IndexReply(const IndexReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IndexReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){}
    , decltype(_impl_.document_number_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status().empty()) {
    _this->_impl_.status_.Set(from._internal_status(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.document_number_ = from._impl_.document_number_;
  // @@protoc_insertion_point(copy_constructor:IndexReply)
}

inline void IndexReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){}
    , decltype(_impl_.document_number_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IndexReply::~IndexReply() {
  // @@protoc_insertion_point(destructor:IndexReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IndexReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.status_.Destroy();
}

void IndexReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IndexReply::Clear() {
// @@protoc_insertion_point(message_clear_start:IndexReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.status_.ClearToEmpty();
  _impl_.document_number_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IndexReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "IndexReply.status"));
        } else
          goto handle_unusual;
        continue;
      // int64 document_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.document_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IndexReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndexReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string status = 1;
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndexReply.status");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_status(), target);
  }

  // int64 document_number = 2;
  if (this->_internal_document_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_document_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndexReply)
  return target;
}

size_t IndexReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndexReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status = 1;
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // int64 document_number = 2;
  if (this->_internal_document_number() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_document_number());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IndexReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IndexReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IndexReply::GetClassData() const { return &_class_data_; }


void IndexReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IndexReply*>(&to_msg);
  auto& from = static_cast<const IndexReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:IndexReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_status().empty()) {
    _this->_internal_set_status(from._internal_status());
  }
  if (from._internal_document_number() != 0) {
    _this->_internal_set_document_number(from._internal_document_number());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IndexReply::CopyFrom(const IndexReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndexReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexReply::IsInitialized() const {
  return true;
}

void IndexReply::InternalSwap(IndexReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.status_, lhs_arena,
      &other->_impl_.status_, rhs_arena
  );
  swap(_impl_.document_number_, other->_impl_.document_number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IndexReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_serverMessages_2eproto_getter, &descriptor_table_serverMessages_2eproto_once,
      file_level_metadata_serverMessages_2eproto[2]);
}

// ===================================================================

class SearchRequest::_Internal {
 public:
};

SearchRequest::SearchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SearchRequest)
}
SearchRequest::SearchRequest(const SearchRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SearchRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.terms_){from._impl_.terms_}
    , decltype(_impl_.logical_operators_){from._impl_.logical_operators_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SearchRequest)
}

inline void SearchRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.terms_){arena}
    , decltype(_impl_.logical_operators_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SearchRequest::~SearchRequest() {
  // @@protoc_insertion_point(destructor:SearchRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SearchRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.terms_.~RepeatedPtrField();
  _impl_.logical_operators_.~RepeatedPtrField();
}

void SearchRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SearchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SearchRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.terms_.Clear();
  _impl_.logical_operators_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string terms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_terms();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "SearchRequest.terms"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string logical_operators = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_logical_operators();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "SearchRequest.logical_operators"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SearchRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SearchRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string terms = 1;
  for (int i = 0, n = this->_internal_terms_size(); i < n; i++) {
    const auto& s = this->_internal_terms(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SearchRequest.terms");
    target = stream->WriteString(1, s, target);
  }

  // repeated string logical_operators = 2;
  for (int i = 0, n = this->_internal_logical_operators_size(); i < n; i++) {
    const auto& s = this->_internal_logical_operators(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SearchRequest.logical_operators");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SearchRequest)
  return target;
}

size_t SearchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SearchRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string terms = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.terms_.size());
  for (int i = 0, n = _impl_.terms_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.terms_.Get(i));
  }

  // repeated string logical_operators = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.logical_operators_.size());
  for (int i = 0, n = _impl_.logical_operators_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.logical_operators_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SearchRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SearchRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SearchRequest::GetClassData() const { return &_class_data_; }


void SearchRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SearchRequest*>(&to_msg);
  auto& from = static_cast<const SearchRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SearchRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.terms_.MergeFrom(from._impl_.terms_);
  _this->_impl_.logical_operators_.MergeFrom(from._impl_.logical_operators_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SearchRequest::CopyFrom(const SearchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SearchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchRequest::IsInitialized() const {
  return true;
}

void SearchRequest::InternalSwap(SearchRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.terms_.InternalSwap(&other->_impl_.terms_);
  _impl_.logical_operators_.InternalSwap(&other->_impl_.logical_operators_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_serverMessages_2eproto_getter, &descriptor_table_serverMessages_2eproto_once,
      file_level_metadata_serverMessages_2eproto[3]);
}

// ===================================================================

class SearchReply_Document::_Internal {
 public:
};

SearchReply_Document::SearchReply_Document(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SearchReply.Document)
}
SearchReply_Document::SearchReply_Document(const SearchReply_Document& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SearchReply_Document* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.document_path_){}
    , decltype(_impl_.client_id_){}
    , decltype(_impl_.frequency_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.document_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.document_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_document_path().empty()) {
    _this->_impl_.document_path_.Set(from._internal_document_path(), 
      _this->GetArenaForAllocation());
  }
  _impl_.client_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_client_id().empty()) {
    _this->_impl_.client_id_.Set(from._internal_client_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.frequency_ = from._impl_.frequency_;
  // @@protoc_insertion_point(copy_constructor:SearchReply.Document)
}

inline void SearchReply_Document::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.document_path_){}
    , decltype(_impl_.client_id_){}
    , decltype(_impl_.frequency_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.document_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.document_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.client_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SearchReply_Document::~SearchReply_Document() {
  // @@protoc_insertion_point(destructor:SearchReply.Document)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SearchReply_Document::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.document_path_.Destroy();
  _impl_.client_id_.Destroy();
}

void SearchReply_Document::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SearchReply_Document::Clear() {
// @@protoc_insertion_point(message_clear_start:SearchReply.Document)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.document_path_.ClearToEmpty();
  _impl_.client_id_.ClearToEmpty();
  _impl_.frequency_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchReply_Document::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string document_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_document_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SearchReply.Document.document_path"));
        } else
          goto handle_unusual;
        continue;
      // int32 frequency = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string client_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_client_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SearchReply.Document.client_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SearchReply_Document::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SearchReply.Document)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string document_path = 1;
  if (!this->_internal_document_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_document_path().data(), static_cast<int>(this->_internal_document_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SearchReply.Document.document_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_document_path(), target);
  }

  // int32 frequency = 2;
  if (this->_internal_frequency() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_frequency(), target);
  }

  // string client_id = 3;
  if (!this->_internal_client_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_id().data(), static_cast<int>(this->_internal_client_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SearchReply.Document.client_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_client_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SearchReply.Document)
  return target;
}

size_t SearchReply_Document::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SearchReply.Document)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string document_path = 1;
  if (!this->_internal_document_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_document_path());
  }

  // string client_id = 3;
  if (!this->_internal_client_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_id());
  }

  // int32 frequency = 2;
  if (this->_internal_frequency() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_frequency());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SearchReply_Document::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SearchReply_Document::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SearchReply_Document::GetClassData() const { return &_class_data_; }


void SearchReply_Document::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SearchReply_Document*>(&to_msg);
  auto& from = static_cast<const SearchReply_Document&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SearchReply.Document)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_document_path().empty()) {
    _this->_internal_set_document_path(from._internal_document_path());
  }
  if (!from._internal_client_id().empty()) {
    _this->_internal_set_client_id(from._internal_client_id());
  }
  if (from._internal_frequency() != 0) {
    _this->_internal_set_frequency(from._internal_frequency());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SearchReply_Document::CopyFrom(const SearchReply_Document& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SearchReply.Document)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchReply_Document::IsInitialized() const {
  return true;
}

void SearchReply_Document::InternalSwap(SearchReply_Document* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.document_path_, lhs_arena,
      &other->_impl_.document_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.client_id_, lhs_arena,
      &other->_impl_.client_id_, rhs_arena
  );
  swap(_impl_.frequency_, other->_impl_.frequency_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchReply_Document::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_serverMessages_2eproto_getter, &descriptor_table_serverMessages_2eproto_once,
      file_level_metadata_serverMessages_2eproto[4]);
}

// ===================================================================

class SearchReply::_Internal {
 public:
};

SearchReply::SearchReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SearchReply)
}
SearchReply::SearchReply(const SearchReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SearchReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.documents_){from._impl_.documents_}
    , decltype(_impl_.execution_time_){}
    , decltype(_impl_.total_results_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.execution_time_, &from._impl_.execution_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.total_results_) -
    reinterpret_cast<char*>(&_impl_.execution_time_)) + sizeof(_impl_.total_results_));
  // @@protoc_insertion_point(copy_constructor:SearchReply)
}

inline void SearchReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.documents_){arena}
    , decltype(_impl_.execution_time_){0}
    , decltype(_impl_.total_results_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SearchReply::~SearchReply() {
  // @@protoc_insertion_point(destructor:SearchReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SearchReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.documents_.~RepeatedPtrField();
}

void SearchReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SearchReply::Clear() {
// @@protoc_insertion_point(message_clear_start:SearchReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.documents_.Clear();
  ::memset(&_impl_.execution_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.total_results_) -
      reinterpret_cast<char*>(&_impl_.execution_time_)) + sizeof(_impl_.total_results_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .SearchReply.Document documents = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_documents(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 total_results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.total_results_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double execution_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.execution_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SearchReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SearchReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SearchReply.Document documents = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_documents_size()); i < n; i++) {
    const auto& repfield = this->_internal_documents(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 total_results = 2;
  if (this->_internal_total_results() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_total_results(), target);
  }

  // double execution_time = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_execution_time = this->_internal_execution_time();
  uint64_t raw_execution_time;
  memcpy(&raw_execution_time, &tmp_execution_time, sizeof(tmp_execution_time));
  if (raw_execution_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_execution_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SearchReply)
  return target;
}

size_t SearchReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SearchReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SearchReply.Document documents = 1;
  total_size += 1UL * this->_internal_documents_size();
  for (const auto& msg : this->_impl_.documents_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // double execution_time = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_execution_time = this->_internal_execution_time();
  uint64_t raw_execution_time;
  memcpy(&raw_execution_time, &tmp_execution_time, sizeof(tmp_execution_time));
  if (raw_execution_time != 0) {
    total_size += 1 + 8;
  }

  // int32 total_results = 2;
  if (this->_internal_total_results() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total_results());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SearchReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SearchReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SearchReply::GetClassData() const { return &_class_data_; }


void SearchReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SearchReply*>(&to_msg);
  auto& from = static_cast<const SearchReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SearchReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.documents_.MergeFrom(from._impl_.documents_);
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_execution_time = from._internal_execution_time();
  uint64_t raw_execution_time;
  memcpy(&raw_execution_time, &tmp_execution_time, sizeof(tmp_execution_time));
  if (raw_execution_time != 0) {
    _this->_internal_set_execution_time(from._internal_execution_time());
  }
  if (from._internal_total_results() != 0) {
    _this->_internal_set_total_results(from._internal_total_results());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SearchReply::CopyFrom(const SearchReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SearchReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchReply::IsInitialized() const {
  return true;
}

void SearchReply::InternalSwap(SearchReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.documents_.InternalSwap(&other->_impl_.documents_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SearchReply, _impl_.total_results_)
      + sizeof(SearchReply::_impl_.total_results_)
      - PROTOBUF_FIELD_OFFSET(SearchReply, _impl_.execution_time_)>(
          reinterpret_cast<char*>(&_impl_.execution_time_),
          reinterpret_cast<char*>(&other->_impl_.execution_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_serverMessages_2eproto_getter, &descriptor_table_serverMessages_2eproto_once,
      file_level_metadata_serverMessages_2eproto[5]);
}

// ===================================================================

class ServerMessage::_Internal {
 public:
  static const ::IndexRequest& index_request(const ServerMessage* msg);
  static const ::SearchRequest& search_request(const ServerMessage* msg);
  static const ::IndexReply& index_reply(const ServerMessage* msg);
  static const ::SearchReply& search_reply(const ServerMessage* msg);
};

const ::IndexRequest&
ServerMessage::_Internal::index_request(const ServerMessage* msg) {
  return *msg->_impl_.index_request_;
}
const ::SearchRequest&
ServerMessage::_Internal::search_request(const ServerMessage* msg) {
  return *msg->_impl_.search_request_;
}
const ::IndexReply&
ServerMessage::_Internal::index_reply(const ServerMessage* msg) {
  return *msg->_impl_.index_reply_;
}
const ::SearchReply&
ServerMessage::_Internal::search_reply(const ServerMessage* msg) {
  return *msg->_impl_.search_reply_;
}
ServerMessage::ServerMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ServerMessage)
}
ServerMessage::ServerMessage(const ServerMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.index_request_){nullptr}
    , decltype(_impl_.search_request_){nullptr}
    , decltype(_impl_.index_reply_){nullptr}
    , decltype(_impl_.search_reply_){nullptr}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_index_request()) {
    _this->_impl_.index_request_ = new ::IndexRequest(*from._impl_.index_request_);
  }
  if (from._internal_has_search_request()) {
    _this->_impl_.search_request_ = new ::SearchRequest(*from._impl_.search_request_);
  }
  if (from._internal_has_index_reply()) {
    _this->_impl_.index_reply_ = new ::IndexReply(*from._impl_.index_reply_);
  }
  if (from._internal_has_search_reply()) {
    _this->_impl_.search_reply_ = new ::SearchReply(*from._impl_.search_reply_);
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:ServerMessage)
}

inline void ServerMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.index_request_){nullptr}
    , decltype(_impl_.search_request_){nullptr}
    , decltype(_impl_.index_reply_){nullptr}
    , decltype(_impl_.search_reply_){nullptr}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ServerMessage::~ServerMessage() {
  // @@protoc_insertion_point(destructor:ServerMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.index_request_;
  if (this != internal_default_instance()) delete _impl_.search_request_;
  if (this != internal_default_instance()) delete _impl_.index_reply_;
  if (this != internal_default_instance()) delete _impl_.search_reply_;
}

void ServerMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.index_request_ != nullptr) {
    delete _impl_.index_request_;
  }
  _impl_.index_request_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.search_request_ != nullptr) {
    delete _impl_.search_request_;
  }
  _impl_.search_request_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.index_reply_ != nullptr) {
    delete _impl_.index_reply_;
  }
  _impl_.index_reply_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.search_reply_ != nullptr) {
    delete _impl_.search_reply_;
  }
  _impl_.search_reply_ = nullptr;
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ServerMessage.MessageType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::ServerMessage_MessageType>(val));
        } else
          goto handle_unusual;
        continue;
      // .IndexRequest index_request = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_index_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SearchRequest search_request = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_search_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .IndexReply index_reply = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_index_reply(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SearchReply search_reply = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_search_reply(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ServerMessage.MessageType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .IndexRequest index_request = 2;
  if (this->_internal_has_index_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::index_request(this),
        _Internal::index_request(this).GetCachedSize(), target, stream);
  }

  // .SearchRequest search_request = 3;
  if (this->_internal_has_search_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::search_request(this),
        _Internal::search_request(this).GetCachedSize(), target, stream);
  }

  // .IndexReply index_reply = 4;
  if (this->_internal_has_index_reply()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::index_reply(this),
        _Internal::index_reply(this).GetCachedSize(), target, stream);
  }

  // .SearchReply search_reply = 5;
  if (this->_internal_has_search_reply()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::search_reply(this),
        _Internal::search_reply(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerMessage)
  return target;
}

size_t ServerMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .IndexRequest index_request = 2;
  if (this->_internal_has_index_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.index_request_);
  }

  // .SearchRequest search_request = 3;
  if (this->_internal_has_search_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.search_request_);
  }

  // .IndexReply index_reply = 4;
  if (this->_internal_has_index_reply()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.index_reply_);
  }

  // .SearchReply search_reply = 5;
  if (this->_internal_has_search_reply()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.search_reply_);
  }

  // .ServerMessage.MessageType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerMessage::GetClassData() const { return &_class_data_; }


void ServerMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerMessage*>(&to_msg);
  auto& from = static_cast<const ServerMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ServerMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_index_request()) {
    _this->_internal_mutable_index_request()->::IndexRequest::MergeFrom(
        from._internal_index_request());
  }
  if (from._internal_has_search_request()) {
    _this->_internal_mutable_search_request()->::SearchRequest::MergeFrom(
        from._internal_search_request());
  }
  if (from._internal_has_index_reply()) {
    _this->_internal_mutable_index_reply()->::IndexReply::MergeFrom(
        from._internal_index_reply());
  }
  if (from._internal_has_search_reply()) {
    _this->_internal_mutable_search_reply()->::SearchReply::MergeFrom(
        from._internal_search_reply());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerMessage::CopyFrom(const ServerMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMessage::IsInitialized() const {
  return true;
}

void ServerMessage::InternalSwap(ServerMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerMessage, _impl_.type_)
      + sizeof(ServerMessage::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(ServerMessage, _impl_.index_request_)>(
          reinterpret_cast<char*>(&_impl_.index_request_),
          reinterpret_cast<char*>(&other->_impl_.index_request_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_serverMessages_2eproto_getter, &descriptor_table_serverMessages_2eproto_once,
      file_level_metadata_serverMessages_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::IndexRequest_WordFrequenciesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::IndexRequest_WordFrequenciesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IndexRequest_WordFrequenciesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::IndexRequest*
Arena::CreateMaybeMessage< ::IndexRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IndexRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::IndexReply*
Arena::CreateMaybeMessage< ::IndexReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IndexReply >(arena);
}
template<> PROTOBUF_NOINLINE ::SearchRequest*
Arena::CreateMaybeMessage< ::SearchRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SearchRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SearchReply_Document*
Arena::CreateMaybeMessage< ::SearchReply_Document >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SearchReply_Document >(arena);
}
template<> PROTOBUF_NOINLINE ::SearchReply*
Arena::CreateMaybeMessage< ::SearchReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SearchReply >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerMessage*
Arena::CreateMaybeMessage< ::ServerMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
