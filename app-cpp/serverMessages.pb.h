// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: serverMessages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_serverMessages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_serverMessages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_serverMessages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_serverMessages_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_serverMessages_2eproto;
class IndexReply;
struct IndexReplyDefaultTypeInternal;
extern IndexReplyDefaultTypeInternal _IndexReply_default_instance_;
class IndexRequest;
struct IndexRequestDefaultTypeInternal;
extern IndexRequestDefaultTypeInternal _IndexRequest_default_instance_;
class IndexRequest_WordFrequenciesEntry_DoNotUse;
struct IndexRequest_WordFrequenciesEntry_DoNotUseDefaultTypeInternal;
extern IndexRequest_WordFrequenciesEntry_DoNotUseDefaultTypeInternal _IndexRequest_WordFrequenciesEntry_DoNotUse_default_instance_;
class SearchReply;
struct SearchReplyDefaultTypeInternal;
extern SearchReplyDefaultTypeInternal _SearchReply_default_instance_;
class SearchReply_Document;
struct SearchReply_DocumentDefaultTypeInternal;
extern SearchReply_DocumentDefaultTypeInternal _SearchReply_Document_default_instance_;
class SearchRequest;
struct SearchRequestDefaultTypeInternal;
extern SearchRequestDefaultTypeInternal _SearchRequest_default_instance_;
class ServerMessage;
struct ServerMessageDefaultTypeInternal;
extern ServerMessageDefaultTypeInternal _ServerMessage_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::IndexReply* Arena::CreateMaybeMessage<::IndexReply>(Arena*);
template<> ::IndexRequest* Arena::CreateMaybeMessage<::IndexRequest>(Arena*);
template<> ::IndexRequest_WordFrequenciesEntry_DoNotUse* Arena::CreateMaybeMessage<::IndexRequest_WordFrequenciesEntry_DoNotUse>(Arena*);
template<> ::SearchReply* Arena::CreateMaybeMessage<::SearchReply>(Arena*);
template<> ::SearchReply_Document* Arena::CreateMaybeMessage<::SearchReply_Document>(Arena*);
template<> ::SearchRequest* Arena::CreateMaybeMessage<::SearchRequest>(Arena*);
template<> ::ServerMessage* Arena::CreateMaybeMessage<::ServerMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum ServerMessage_MessageType : int {
  ServerMessage_MessageType_INDEX_REQUEST = 0,
  ServerMessage_MessageType_SEARCH_REQUEST = 1,
  ServerMessage_MessageType_INDEX_REPLY = 2,
  ServerMessage_MessageType_SEARCH_REPLY = 3,
  ServerMessage_MessageType_QUIT = 4,
  ServerMessage_MessageType_ServerMessage_MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ServerMessage_MessageType_ServerMessage_MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ServerMessage_MessageType_IsValid(int value);
constexpr ServerMessage_MessageType ServerMessage_MessageType_MessageType_MIN = ServerMessage_MessageType_INDEX_REQUEST;
constexpr ServerMessage_MessageType ServerMessage_MessageType_MessageType_MAX = ServerMessage_MessageType_QUIT;
constexpr int ServerMessage_MessageType_MessageType_ARRAYSIZE = ServerMessage_MessageType_MessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerMessage_MessageType_descriptor();
template<typename T>
inline const std::string& ServerMessage_MessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ServerMessage_MessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ServerMessage_MessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ServerMessage_MessageType_descriptor(), enum_t_value);
}
inline bool ServerMessage_MessageType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ServerMessage_MessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ServerMessage_MessageType>(
    ServerMessage_MessageType_descriptor(), name, value);
}
// ===================================================================

class IndexRequest_WordFrequenciesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<IndexRequest_WordFrequenciesEntry_DoNotUse, 
    std::string, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<IndexRequest_WordFrequenciesEntry_DoNotUse, 
    std::string, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> SuperType;
  IndexRequest_WordFrequenciesEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR IndexRequest_WordFrequenciesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit IndexRequest_WordFrequenciesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const IndexRequest_WordFrequenciesEntry_DoNotUse& other);
  static const IndexRequest_WordFrequenciesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const IndexRequest_WordFrequenciesEntry_DoNotUse*>(&_IndexRequest_WordFrequenciesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "IndexRequest.WordFrequenciesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_serverMessages_2eproto;
};

// -------------------------------------------------------------------

class IndexRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndexRequest) */ {
 public:
  inline IndexRequest() : IndexRequest(nullptr) {}
  ~IndexRequest() override;
  explicit PROTOBUF_CONSTEXPR IndexRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IndexRequest(const IndexRequest& from);
  IndexRequest(IndexRequest&& from) noexcept
    : IndexRequest() {
    *this = ::std::move(from);
  }

  inline IndexRequest& operator=(const IndexRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IndexRequest& operator=(IndexRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IndexRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const IndexRequest* internal_default_instance() {
    return reinterpret_cast<const IndexRequest*>(
               &_IndexRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IndexRequest& a, IndexRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IndexRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IndexRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IndexRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IndexRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IndexRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const IndexRequest& from) {
    IndexRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IndexRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndexRequest";
  }
  protected:
  explicit IndexRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kWordFrequenciesFieldNumber = 3,
    kClientIdFieldNumber = 1,
    kDocumentPathFieldNumber = 2,
  };
  // map<string, int32> word_frequencies = 3;
  int word_frequencies_size() const;
  private:
  int _internal_word_frequencies_size() const;
  public:
  void clear_word_frequencies();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
      _internal_word_frequencies() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
      _internal_mutable_word_frequencies();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
      word_frequencies() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
      mutable_word_frequencies();

  // string client_id = 1;
  void clear_client_id();
  const std::string& client_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_client_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_client_id();
  PROTOBUF_NODISCARD std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // string document_path = 2;
  void clear_document_path();
  const std::string& document_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_document_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_document_path();
  PROTOBUF_NODISCARD std::string* release_document_path();
  void set_allocated_document_path(std::string* document_path);
  private:
  const std::string& _internal_document_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_document_path(const std::string& value);
  std::string* _internal_mutable_document_path();
  public:

  // @@protoc_insertion_point(class_scope:IndexRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        IndexRequest_WordFrequenciesEntry_DoNotUse,
        std::string, int32_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> word_frequencies_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr document_path_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_serverMessages_2eproto;
};
// -------------------------------------------------------------------

class IndexReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndexReply) */ {
 public:
  inline IndexReply() : IndexReply(nullptr) {}
  ~IndexReply() override;
  explicit PROTOBUF_CONSTEXPR IndexReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IndexReply(const IndexReply& from);
  IndexReply(IndexReply&& from) noexcept
    : IndexReply() {
    *this = ::std::move(from);
  }

  inline IndexReply& operator=(const IndexReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline IndexReply& operator=(IndexReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IndexReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const IndexReply* internal_default_instance() {
    return reinterpret_cast<const IndexReply*>(
               &_IndexReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(IndexReply& a, IndexReply& b) {
    a.Swap(&b);
  }
  inline void Swap(IndexReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IndexReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IndexReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IndexReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IndexReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const IndexReply& from) {
    IndexReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IndexReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndexReply";
  }
  protected:
  explicit IndexReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kDocumentNumberFieldNumber = 2,
  };
  // string status = 1;
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // int64 document_number = 2;
  void clear_document_number();
  int64_t document_number() const;
  void set_document_number(int64_t value);
  private:
  int64_t _internal_document_number() const;
  void _internal_set_document_number(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:IndexReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
    int64_t document_number_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_serverMessages_2eproto;
};
// -------------------------------------------------------------------

class SearchRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SearchRequest) */ {
 public:
  inline SearchRequest() : SearchRequest(nullptr) {}
  ~SearchRequest() override;
  explicit PROTOBUF_CONSTEXPR SearchRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchRequest(const SearchRequest& from);
  SearchRequest(SearchRequest&& from) noexcept
    : SearchRequest() {
    *this = ::std::move(from);
  }

  inline SearchRequest& operator=(const SearchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchRequest& operator=(SearchRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchRequest* internal_default_instance() {
    return reinterpret_cast<const SearchRequest*>(
               &_SearchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SearchRequest& a, SearchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SearchRequest& from) {
    SearchRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SearchRequest";
  }
  protected:
  explicit SearchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTermsFieldNumber = 1,
    kLogicalOperatorsFieldNumber = 2,
  };
  // repeated string terms = 1;
  int terms_size() const;
  private:
  int _internal_terms_size() const;
  public:
  void clear_terms();
  const std::string& terms(int index) const;
  std::string* mutable_terms(int index);
  void set_terms(int index, const std::string& value);
  void set_terms(int index, std::string&& value);
  void set_terms(int index, const char* value);
  void set_terms(int index, const char* value, size_t size);
  std::string* add_terms();
  void add_terms(const std::string& value);
  void add_terms(std::string&& value);
  void add_terms(const char* value);
  void add_terms(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& terms() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_terms();
  private:
  const std::string& _internal_terms(int index) const;
  std::string* _internal_add_terms();
  public:

  // repeated string logical_operators = 2;
  int logical_operators_size() const;
  private:
  int _internal_logical_operators_size() const;
  public:
  void clear_logical_operators();
  const std::string& logical_operators(int index) const;
  std::string* mutable_logical_operators(int index);
  void set_logical_operators(int index, const std::string& value);
  void set_logical_operators(int index, std::string&& value);
  void set_logical_operators(int index, const char* value);
  void set_logical_operators(int index, const char* value, size_t size);
  std::string* add_logical_operators();
  void add_logical_operators(const std::string& value);
  void add_logical_operators(std::string&& value);
  void add_logical_operators(const char* value);
  void add_logical_operators(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& logical_operators() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_logical_operators();
  private:
  const std::string& _internal_logical_operators(int index) const;
  std::string* _internal_add_logical_operators();
  public:

  // @@protoc_insertion_point(class_scope:SearchRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> terms_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> logical_operators_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_serverMessages_2eproto;
};
// -------------------------------------------------------------------

class SearchReply_Document final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SearchReply.Document) */ {
 public:
  inline SearchReply_Document() : SearchReply_Document(nullptr) {}
  ~SearchReply_Document() override;
  explicit PROTOBUF_CONSTEXPR SearchReply_Document(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchReply_Document(const SearchReply_Document& from);
  SearchReply_Document(SearchReply_Document&& from) noexcept
    : SearchReply_Document() {
    *this = ::std::move(from);
  }

  inline SearchReply_Document& operator=(const SearchReply_Document& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchReply_Document& operator=(SearchReply_Document&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchReply_Document& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchReply_Document* internal_default_instance() {
    return reinterpret_cast<const SearchReply_Document*>(
               &_SearchReply_Document_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SearchReply_Document& a, SearchReply_Document& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchReply_Document* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchReply_Document* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchReply_Document* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchReply_Document>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchReply_Document& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SearchReply_Document& from) {
    SearchReply_Document::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchReply_Document* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SearchReply.Document";
  }
  protected:
  explicit SearchReply_Document(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDocumentPathFieldNumber = 1,
    kClientIdFieldNumber = 3,
    kFrequencyFieldNumber = 2,
  };
  // string document_path = 1;
  void clear_document_path();
  const std::string& document_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_document_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_document_path();
  PROTOBUF_NODISCARD std::string* release_document_path();
  void set_allocated_document_path(std::string* document_path);
  private:
  const std::string& _internal_document_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_document_path(const std::string& value);
  std::string* _internal_mutable_document_path();
  public:

  // string client_id = 3;
  void clear_client_id();
  const std::string& client_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_client_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_client_id();
  PROTOBUF_NODISCARD std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // int32 frequency = 2;
  void clear_frequency();
  int32_t frequency() const;
  void set_frequency(int32_t value);
  private:
  int32_t _internal_frequency() const;
  void _internal_set_frequency(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SearchReply.Document)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr document_path_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
    int32_t frequency_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_serverMessages_2eproto;
};
// -------------------------------------------------------------------

class SearchReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SearchReply) */ {
 public:
  inline SearchReply() : SearchReply(nullptr) {}
  ~SearchReply() override;
  explicit PROTOBUF_CONSTEXPR SearchReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchReply(const SearchReply& from);
  SearchReply(SearchReply&& from) noexcept
    : SearchReply() {
    *this = ::std::move(from);
  }

  inline SearchReply& operator=(const SearchReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchReply& operator=(SearchReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchReply* internal_default_instance() {
    return reinterpret_cast<const SearchReply*>(
               &_SearchReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SearchReply& a, SearchReply& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SearchReply& from) {
    SearchReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SearchReply";
  }
  protected:
  explicit SearchReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SearchReply_Document Document;

  // accessors -------------------------------------------------------

  enum : int {
    kDocumentsFieldNumber = 1,
    kExecutionTimeFieldNumber = 3,
    kTotalResultsFieldNumber = 2,
  };
  // repeated .SearchReply.Document documents = 1;
  int documents_size() const;
  private:
  int _internal_documents_size() const;
  public:
  void clear_documents();
  ::SearchReply_Document* mutable_documents(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SearchReply_Document >*
      mutable_documents();
  private:
  const ::SearchReply_Document& _internal_documents(int index) const;
  ::SearchReply_Document* _internal_add_documents();
  public:
  const ::SearchReply_Document& documents(int index) const;
  ::SearchReply_Document* add_documents();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SearchReply_Document >&
      documents() const;

  // double execution_time = 3;
  void clear_execution_time();
  double execution_time() const;
  void set_execution_time(double value);
  private:
  double _internal_execution_time() const;
  void _internal_set_execution_time(double value);
  public:

  // int32 total_results = 2;
  void clear_total_results();
  int32_t total_results() const;
  void set_total_results(int32_t value);
  private:
  int32_t _internal_total_results() const;
  void _internal_set_total_results(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SearchReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SearchReply_Document > documents_;
    double execution_time_;
    int32_t total_results_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_serverMessages_2eproto;
};
// -------------------------------------------------------------------

class ServerMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServerMessage) */ {
 public:
  inline ServerMessage() : ServerMessage(nullptr) {}
  ~ServerMessage() override;
  explicit PROTOBUF_CONSTEXPR ServerMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerMessage(const ServerMessage& from);
  ServerMessage(ServerMessage&& from) noexcept
    : ServerMessage() {
    *this = ::std::move(from);
  }

  inline ServerMessage& operator=(const ServerMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerMessage& operator=(ServerMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerMessage* internal_default_instance() {
    return reinterpret_cast<const ServerMessage*>(
               &_ServerMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ServerMessage& a, ServerMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServerMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ServerMessage& from) {
    ServerMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServerMessage";
  }
  protected:
  explicit ServerMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ServerMessage_MessageType MessageType;
  static constexpr MessageType INDEX_REQUEST =
    ServerMessage_MessageType_INDEX_REQUEST;
  static constexpr MessageType SEARCH_REQUEST =
    ServerMessage_MessageType_SEARCH_REQUEST;
  static constexpr MessageType INDEX_REPLY =
    ServerMessage_MessageType_INDEX_REPLY;
  static constexpr MessageType SEARCH_REPLY =
    ServerMessage_MessageType_SEARCH_REPLY;
  static constexpr MessageType QUIT =
    ServerMessage_MessageType_QUIT;
  static inline bool MessageType_IsValid(int value) {
    return ServerMessage_MessageType_IsValid(value);
  }
  static constexpr MessageType MessageType_MIN =
    ServerMessage_MessageType_MessageType_MIN;
  static constexpr MessageType MessageType_MAX =
    ServerMessage_MessageType_MessageType_MAX;
  static constexpr int MessageType_ARRAYSIZE =
    ServerMessage_MessageType_MessageType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MessageType_descriptor() {
    return ServerMessage_MessageType_descriptor();
  }
  template<typename T>
  static inline const std::string& MessageType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MessageType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MessageType_Name.");
    return ServerMessage_MessageType_Name(enum_t_value);
  }
  static inline bool MessageType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MessageType* value) {
    return ServerMessage_MessageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIndexRequestFieldNumber = 2,
    kSearchRequestFieldNumber = 3,
    kIndexReplyFieldNumber = 4,
    kSearchReplyFieldNumber = 5,
    kTypeFieldNumber = 1,
  };
  // .IndexRequest index_request = 2;
  bool has_index_request() const;
  private:
  bool _internal_has_index_request() const;
  public:
  void clear_index_request();
  const ::IndexRequest& index_request() const;
  PROTOBUF_NODISCARD ::IndexRequest* release_index_request();
  ::IndexRequest* mutable_index_request();
  void set_allocated_index_request(::IndexRequest* index_request);
  private:
  const ::IndexRequest& _internal_index_request() const;
  ::IndexRequest* _internal_mutable_index_request();
  public:
  void unsafe_arena_set_allocated_index_request(
      ::IndexRequest* index_request);
  ::IndexRequest* unsafe_arena_release_index_request();

  // .SearchRequest search_request = 3;
  bool has_search_request() const;
  private:
  bool _internal_has_search_request() const;
  public:
  void clear_search_request();
  const ::SearchRequest& search_request() const;
  PROTOBUF_NODISCARD ::SearchRequest* release_search_request();
  ::SearchRequest* mutable_search_request();
  void set_allocated_search_request(::SearchRequest* search_request);
  private:
  const ::SearchRequest& _internal_search_request() const;
  ::SearchRequest* _internal_mutable_search_request();
  public:
  void unsafe_arena_set_allocated_search_request(
      ::SearchRequest* search_request);
  ::SearchRequest* unsafe_arena_release_search_request();

  // .IndexReply index_reply = 4;
  bool has_index_reply() const;
  private:
  bool _internal_has_index_reply() const;
  public:
  void clear_index_reply();
  const ::IndexReply& index_reply() const;
  PROTOBUF_NODISCARD ::IndexReply* release_index_reply();
  ::IndexReply* mutable_index_reply();
  void set_allocated_index_reply(::IndexReply* index_reply);
  private:
  const ::IndexReply& _internal_index_reply() const;
  ::IndexReply* _internal_mutable_index_reply();
  public:
  void unsafe_arena_set_allocated_index_reply(
      ::IndexReply* index_reply);
  ::IndexReply* unsafe_arena_release_index_reply();

  // .SearchReply search_reply = 5;
  bool has_search_reply() const;
  private:
  bool _internal_has_search_reply() const;
  public:
  void clear_search_reply();
  const ::SearchReply& search_reply() const;
  PROTOBUF_NODISCARD ::SearchReply* release_search_reply();
  ::SearchReply* mutable_search_reply();
  void set_allocated_search_reply(::SearchReply* search_reply);
  private:
  const ::SearchReply& _internal_search_reply() const;
  ::SearchReply* _internal_mutable_search_reply();
  public:
  void unsafe_arena_set_allocated_search_reply(
      ::SearchReply* search_reply);
  ::SearchReply* unsafe_arena_release_search_reply();

  // .ServerMessage.MessageType type = 1;
  void clear_type();
  ::ServerMessage_MessageType type() const;
  void set_type(::ServerMessage_MessageType value);
  private:
  ::ServerMessage_MessageType _internal_type() const;
  void _internal_set_type(::ServerMessage_MessageType value);
  public:

  // @@protoc_insertion_point(class_scope:ServerMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::IndexRequest* index_request_;
    ::SearchRequest* search_request_;
    ::IndexReply* index_reply_;
    ::SearchReply* search_reply_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_serverMessages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// IndexRequest

// string client_id = 1;
inline void IndexRequest::clear_client_id() {
  _impl_.client_id_.ClearToEmpty();
}
inline const std::string& IndexRequest::client_id() const {
  // @@protoc_insertion_point(field_get:IndexRequest.client_id)
  return _internal_client_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IndexRequest::set_client_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.client_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IndexRequest.client_id)
}
inline std::string* IndexRequest::mutable_client_id() {
  std::string* _s = _internal_mutable_client_id();
  // @@protoc_insertion_point(field_mutable:IndexRequest.client_id)
  return _s;
}
inline const std::string& IndexRequest::_internal_client_id() const {
  return _impl_.client_id_.Get();
}
inline void IndexRequest::_internal_set_client_id(const std::string& value) {
  
  _impl_.client_id_.Set(value, GetArenaForAllocation());
}
inline std::string* IndexRequest::_internal_mutable_client_id() {
  
  return _impl_.client_id_.Mutable(GetArenaForAllocation());
}
inline std::string* IndexRequest::release_client_id() {
  // @@protoc_insertion_point(field_release:IndexRequest.client_id)
  return _impl_.client_id_.Release();
}
inline void IndexRequest::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  _impl_.client_id_.SetAllocated(client_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.client_id_.IsDefault()) {
    _impl_.client_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:IndexRequest.client_id)
}

// string document_path = 2;
inline void IndexRequest::clear_document_path() {
  _impl_.document_path_.ClearToEmpty();
}
inline const std::string& IndexRequest::document_path() const {
  // @@protoc_insertion_point(field_get:IndexRequest.document_path)
  return _internal_document_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IndexRequest::set_document_path(ArgT0&& arg0, ArgT... args) {
 
 _impl_.document_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IndexRequest.document_path)
}
inline std::string* IndexRequest::mutable_document_path() {
  std::string* _s = _internal_mutable_document_path();
  // @@protoc_insertion_point(field_mutable:IndexRequest.document_path)
  return _s;
}
inline const std::string& IndexRequest::_internal_document_path() const {
  return _impl_.document_path_.Get();
}
inline void IndexRequest::_internal_set_document_path(const std::string& value) {
  
  _impl_.document_path_.Set(value, GetArenaForAllocation());
}
inline std::string* IndexRequest::_internal_mutable_document_path() {
  
  return _impl_.document_path_.Mutable(GetArenaForAllocation());
}
inline std::string* IndexRequest::release_document_path() {
  // @@protoc_insertion_point(field_release:IndexRequest.document_path)
  return _impl_.document_path_.Release();
}
inline void IndexRequest::set_allocated_document_path(std::string* document_path) {
  if (document_path != nullptr) {
    
  } else {
    
  }
  _impl_.document_path_.SetAllocated(document_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.document_path_.IsDefault()) {
    _impl_.document_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:IndexRequest.document_path)
}

// map<string, int32> word_frequencies = 3;
inline int IndexRequest::_internal_word_frequencies_size() const {
  return _impl_.word_frequencies_.size();
}
inline int IndexRequest::word_frequencies_size() const {
  return _internal_word_frequencies_size();
}
inline void IndexRequest::clear_word_frequencies() {
  _impl_.word_frequencies_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
IndexRequest::_internal_word_frequencies() const {
  return _impl_.word_frequencies_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
IndexRequest::word_frequencies() const {
  // @@protoc_insertion_point(field_map:IndexRequest.word_frequencies)
  return _internal_word_frequencies();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
IndexRequest::_internal_mutable_word_frequencies() {
  return _impl_.word_frequencies_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
IndexRequest::mutable_word_frequencies() {
  // @@protoc_insertion_point(field_mutable_map:IndexRequest.word_frequencies)
  return _internal_mutable_word_frequencies();
}

// -------------------------------------------------------------------

// IndexReply

// string status = 1;
inline void IndexReply::clear_status() {
  _impl_.status_.ClearToEmpty();
}
inline const std::string& IndexReply::status() const {
  // @@protoc_insertion_point(field_get:IndexReply.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IndexReply::set_status(ArgT0&& arg0, ArgT... args) {
 
 _impl_.status_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IndexReply.status)
}
inline std::string* IndexReply::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:IndexReply.status)
  return _s;
}
inline const std::string& IndexReply::_internal_status() const {
  return _impl_.status_.Get();
}
inline void IndexReply::_internal_set_status(const std::string& value) {
  
  _impl_.status_.Set(value, GetArenaForAllocation());
}
inline std::string* IndexReply::_internal_mutable_status() {
  
  return _impl_.status_.Mutable(GetArenaForAllocation());
}
inline std::string* IndexReply::release_status() {
  // @@protoc_insertion_point(field_release:IndexReply.status)
  return _impl_.status_.Release();
}
inline void IndexReply::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  _impl_.status_.SetAllocated(status, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.status_.IsDefault()) {
    _impl_.status_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:IndexReply.status)
}

// int64 document_number = 2;
inline void IndexReply::clear_document_number() {
  _impl_.document_number_ = int64_t{0};
}
inline int64_t IndexReply::_internal_document_number() const {
  return _impl_.document_number_;
}
inline int64_t IndexReply::document_number() const {
  // @@protoc_insertion_point(field_get:IndexReply.document_number)
  return _internal_document_number();
}
inline void IndexReply::_internal_set_document_number(int64_t value) {
  
  _impl_.document_number_ = value;
}
inline void IndexReply::set_document_number(int64_t value) {
  _internal_set_document_number(value);
  // @@protoc_insertion_point(field_set:IndexReply.document_number)
}

// -------------------------------------------------------------------

// SearchRequest

// repeated string terms = 1;
inline int SearchRequest::_internal_terms_size() const {
  return _impl_.terms_.size();
}
inline int SearchRequest::terms_size() const {
  return _internal_terms_size();
}
inline void SearchRequest::clear_terms() {
  _impl_.terms_.Clear();
}
inline std::string* SearchRequest::add_terms() {
  std::string* _s = _internal_add_terms();
  // @@protoc_insertion_point(field_add_mutable:SearchRequest.terms)
  return _s;
}
inline const std::string& SearchRequest::_internal_terms(int index) const {
  return _impl_.terms_.Get(index);
}
inline const std::string& SearchRequest::terms(int index) const {
  // @@protoc_insertion_point(field_get:SearchRequest.terms)
  return _internal_terms(index);
}
inline std::string* SearchRequest::mutable_terms(int index) {
  // @@protoc_insertion_point(field_mutable:SearchRequest.terms)
  return _impl_.terms_.Mutable(index);
}
inline void SearchRequest::set_terms(int index, const std::string& value) {
  _impl_.terms_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:SearchRequest.terms)
}
inline void SearchRequest::set_terms(int index, std::string&& value) {
  _impl_.terms_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:SearchRequest.terms)
}
inline void SearchRequest::set_terms(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.terms_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SearchRequest.terms)
}
inline void SearchRequest::set_terms(int index, const char* value, size_t size) {
  _impl_.terms_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SearchRequest.terms)
}
inline std::string* SearchRequest::_internal_add_terms() {
  return _impl_.terms_.Add();
}
inline void SearchRequest::add_terms(const std::string& value) {
  _impl_.terms_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SearchRequest.terms)
}
inline void SearchRequest::add_terms(std::string&& value) {
  _impl_.terms_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:SearchRequest.terms)
}
inline void SearchRequest::add_terms(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.terms_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SearchRequest.terms)
}
inline void SearchRequest::add_terms(const char* value, size_t size) {
  _impl_.terms_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SearchRequest.terms)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SearchRequest::terms() const {
  // @@protoc_insertion_point(field_list:SearchRequest.terms)
  return _impl_.terms_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SearchRequest::mutable_terms() {
  // @@protoc_insertion_point(field_mutable_list:SearchRequest.terms)
  return &_impl_.terms_;
}

// repeated string logical_operators = 2;
inline int SearchRequest::_internal_logical_operators_size() const {
  return _impl_.logical_operators_.size();
}
inline int SearchRequest::logical_operators_size() const {
  return _internal_logical_operators_size();
}
inline void SearchRequest::clear_logical_operators() {
  _impl_.logical_operators_.Clear();
}
inline std::string* SearchRequest::add_logical_operators() {
  std::string* _s = _internal_add_logical_operators();
  // @@protoc_insertion_point(field_add_mutable:SearchRequest.logical_operators)
  return _s;
}
inline const std::string& SearchRequest::_internal_logical_operators(int index) const {
  return _impl_.logical_operators_.Get(index);
}
inline const std::string& SearchRequest::logical_operators(int index) const {
  // @@protoc_insertion_point(field_get:SearchRequest.logical_operators)
  return _internal_logical_operators(index);
}
inline std::string* SearchRequest::mutable_logical_operators(int index) {
  // @@protoc_insertion_point(field_mutable:SearchRequest.logical_operators)
  return _impl_.logical_operators_.Mutable(index);
}
inline void SearchRequest::set_logical_operators(int index, const std::string& value) {
  _impl_.logical_operators_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:SearchRequest.logical_operators)
}
inline void SearchRequest::set_logical_operators(int index, std::string&& value) {
  _impl_.logical_operators_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:SearchRequest.logical_operators)
}
inline void SearchRequest::set_logical_operators(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.logical_operators_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SearchRequest.logical_operators)
}
inline void SearchRequest::set_logical_operators(int index, const char* value, size_t size) {
  _impl_.logical_operators_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SearchRequest.logical_operators)
}
inline std::string* SearchRequest::_internal_add_logical_operators() {
  return _impl_.logical_operators_.Add();
}
inline void SearchRequest::add_logical_operators(const std::string& value) {
  _impl_.logical_operators_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SearchRequest.logical_operators)
}
inline void SearchRequest::add_logical_operators(std::string&& value) {
  _impl_.logical_operators_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:SearchRequest.logical_operators)
}
inline void SearchRequest::add_logical_operators(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.logical_operators_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SearchRequest.logical_operators)
}
inline void SearchRequest::add_logical_operators(const char* value, size_t size) {
  _impl_.logical_operators_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SearchRequest.logical_operators)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SearchRequest::logical_operators() const {
  // @@protoc_insertion_point(field_list:SearchRequest.logical_operators)
  return _impl_.logical_operators_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SearchRequest::mutable_logical_operators() {
  // @@protoc_insertion_point(field_mutable_list:SearchRequest.logical_operators)
  return &_impl_.logical_operators_;
}

// -------------------------------------------------------------------

// SearchReply_Document

// string document_path = 1;
inline void SearchReply_Document::clear_document_path() {
  _impl_.document_path_.ClearToEmpty();
}
inline const std::string& SearchReply_Document::document_path() const {
  // @@protoc_insertion_point(field_get:SearchReply.Document.document_path)
  return _internal_document_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchReply_Document::set_document_path(ArgT0&& arg0, ArgT... args) {
 
 _impl_.document_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SearchReply.Document.document_path)
}
inline std::string* SearchReply_Document::mutable_document_path() {
  std::string* _s = _internal_mutable_document_path();
  // @@protoc_insertion_point(field_mutable:SearchReply.Document.document_path)
  return _s;
}
inline const std::string& SearchReply_Document::_internal_document_path() const {
  return _impl_.document_path_.Get();
}
inline void SearchReply_Document::_internal_set_document_path(const std::string& value) {
  
  _impl_.document_path_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchReply_Document::_internal_mutable_document_path() {
  
  return _impl_.document_path_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchReply_Document::release_document_path() {
  // @@protoc_insertion_point(field_release:SearchReply.Document.document_path)
  return _impl_.document_path_.Release();
}
inline void SearchReply_Document::set_allocated_document_path(std::string* document_path) {
  if (document_path != nullptr) {
    
  } else {
    
  }
  _impl_.document_path_.SetAllocated(document_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.document_path_.IsDefault()) {
    _impl_.document_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SearchReply.Document.document_path)
}

// int32 frequency = 2;
inline void SearchReply_Document::clear_frequency() {
  _impl_.frequency_ = 0;
}
inline int32_t SearchReply_Document::_internal_frequency() const {
  return _impl_.frequency_;
}
inline int32_t SearchReply_Document::frequency() const {
  // @@protoc_insertion_point(field_get:SearchReply.Document.frequency)
  return _internal_frequency();
}
inline void SearchReply_Document::_internal_set_frequency(int32_t value) {
  
  _impl_.frequency_ = value;
}
inline void SearchReply_Document::set_frequency(int32_t value) {
  _internal_set_frequency(value);
  // @@protoc_insertion_point(field_set:SearchReply.Document.frequency)
}

// string client_id = 3;
inline void SearchReply_Document::clear_client_id() {
  _impl_.client_id_.ClearToEmpty();
}
inline const std::string& SearchReply_Document::client_id() const {
  // @@protoc_insertion_point(field_get:SearchReply.Document.client_id)
  return _internal_client_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchReply_Document::set_client_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.client_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SearchReply.Document.client_id)
}
inline std::string* SearchReply_Document::mutable_client_id() {
  std::string* _s = _internal_mutable_client_id();
  // @@protoc_insertion_point(field_mutable:SearchReply.Document.client_id)
  return _s;
}
inline const std::string& SearchReply_Document::_internal_client_id() const {
  return _impl_.client_id_.Get();
}
inline void SearchReply_Document::_internal_set_client_id(const std::string& value) {
  
  _impl_.client_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchReply_Document::_internal_mutable_client_id() {
  
  return _impl_.client_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchReply_Document::release_client_id() {
  // @@protoc_insertion_point(field_release:SearchReply.Document.client_id)
  return _impl_.client_id_.Release();
}
inline void SearchReply_Document::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  _impl_.client_id_.SetAllocated(client_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.client_id_.IsDefault()) {
    _impl_.client_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SearchReply.Document.client_id)
}

// -------------------------------------------------------------------

// SearchReply

// repeated .SearchReply.Document documents = 1;
inline int SearchReply::_internal_documents_size() const {
  return _impl_.documents_.size();
}
inline int SearchReply::documents_size() const {
  return _internal_documents_size();
}
inline void SearchReply::clear_documents() {
  _impl_.documents_.Clear();
}
inline ::SearchReply_Document* SearchReply::mutable_documents(int index) {
  // @@protoc_insertion_point(field_mutable:SearchReply.documents)
  return _impl_.documents_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SearchReply_Document >*
SearchReply::mutable_documents() {
  // @@protoc_insertion_point(field_mutable_list:SearchReply.documents)
  return &_impl_.documents_;
}
inline const ::SearchReply_Document& SearchReply::_internal_documents(int index) const {
  return _impl_.documents_.Get(index);
}
inline const ::SearchReply_Document& SearchReply::documents(int index) const {
  // @@protoc_insertion_point(field_get:SearchReply.documents)
  return _internal_documents(index);
}
inline ::SearchReply_Document* SearchReply::_internal_add_documents() {
  return _impl_.documents_.Add();
}
inline ::SearchReply_Document* SearchReply::add_documents() {
  ::SearchReply_Document* _add = _internal_add_documents();
  // @@protoc_insertion_point(field_add:SearchReply.documents)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SearchReply_Document >&
SearchReply::documents() const {
  // @@protoc_insertion_point(field_list:SearchReply.documents)
  return _impl_.documents_;
}

// int32 total_results = 2;
inline void SearchReply::clear_total_results() {
  _impl_.total_results_ = 0;
}
inline int32_t SearchReply::_internal_total_results() const {
  return _impl_.total_results_;
}
inline int32_t SearchReply::total_results() const {
  // @@protoc_insertion_point(field_get:SearchReply.total_results)
  return _internal_total_results();
}
inline void SearchReply::_internal_set_total_results(int32_t value) {
  
  _impl_.total_results_ = value;
}
inline void SearchReply::set_total_results(int32_t value) {
  _internal_set_total_results(value);
  // @@protoc_insertion_point(field_set:SearchReply.total_results)
}

// double execution_time = 3;
inline void SearchReply::clear_execution_time() {
  _impl_.execution_time_ = 0;
}
inline double SearchReply::_internal_execution_time() const {
  return _impl_.execution_time_;
}
inline double SearchReply::execution_time() const {
  // @@protoc_insertion_point(field_get:SearchReply.execution_time)
  return _internal_execution_time();
}
inline void SearchReply::_internal_set_execution_time(double value) {
  
  _impl_.execution_time_ = value;
}
inline void SearchReply::set_execution_time(double value) {
  _internal_set_execution_time(value);
  // @@protoc_insertion_point(field_set:SearchReply.execution_time)
}

// -------------------------------------------------------------------

// ServerMessage

// .ServerMessage.MessageType type = 1;
inline void ServerMessage::clear_type() {
  _impl_.type_ = 0;
}
inline ::ServerMessage_MessageType ServerMessage::_internal_type() const {
  return static_cast< ::ServerMessage_MessageType >(_impl_.type_);
}
inline ::ServerMessage_MessageType ServerMessage::type() const {
  // @@protoc_insertion_point(field_get:ServerMessage.type)
  return _internal_type();
}
inline void ServerMessage::_internal_set_type(::ServerMessage_MessageType value) {
  
  _impl_.type_ = value;
}
inline void ServerMessage::set_type(::ServerMessage_MessageType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ServerMessage.type)
}

// .IndexRequest index_request = 2;
inline bool ServerMessage::_internal_has_index_request() const {
  return this != internal_default_instance() && _impl_.index_request_ != nullptr;
}
inline bool ServerMessage::has_index_request() const {
  return _internal_has_index_request();
}
inline void ServerMessage::clear_index_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.index_request_ != nullptr) {
    delete _impl_.index_request_;
  }
  _impl_.index_request_ = nullptr;
}
inline const ::IndexRequest& ServerMessage::_internal_index_request() const {
  const ::IndexRequest* p = _impl_.index_request_;
  return p != nullptr ? *p : reinterpret_cast<const ::IndexRequest&>(
      ::_IndexRequest_default_instance_);
}
inline const ::IndexRequest& ServerMessage::index_request() const {
  // @@protoc_insertion_point(field_get:ServerMessage.index_request)
  return _internal_index_request();
}
inline void ServerMessage::unsafe_arena_set_allocated_index_request(
    ::IndexRequest* index_request) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.index_request_);
  }
  _impl_.index_request_ = index_request;
  if (index_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ServerMessage.index_request)
}
inline ::IndexRequest* ServerMessage::release_index_request() {
  
  ::IndexRequest* temp = _impl_.index_request_;
  _impl_.index_request_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::IndexRequest* ServerMessage::unsafe_arena_release_index_request() {
  // @@protoc_insertion_point(field_release:ServerMessage.index_request)
  
  ::IndexRequest* temp = _impl_.index_request_;
  _impl_.index_request_ = nullptr;
  return temp;
}
inline ::IndexRequest* ServerMessage::_internal_mutable_index_request() {
  
  if (_impl_.index_request_ == nullptr) {
    auto* p = CreateMaybeMessage<::IndexRequest>(GetArenaForAllocation());
    _impl_.index_request_ = p;
  }
  return _impl_.index_request_;
}
inline ::IndexRequest* ServerMessage::mutable_index_request() {
  ::IndexRequest* _msg = _internal_mutable_index_request();
  // @@protoc_insertion_point(field_mutable:ServerMessage.index_request)
  return _msg;
}
inline void ServerMessage::set_allocated_index_request(::IndexRequest* index_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.index_request_;
  }
  if (index_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(index_request);
    if (message_arena != submessage_arena) {
      index_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, index_request, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.index_request_ = index_request;
  // @@protoc_insertion_point(field_set_allocated:ServerMessage.index_request)
}

// .SearchRequest search_request = 3;
inline bool ServerMessage::_internal_has_search_request() const {
  return this != internal_default_instance() && _impl_.search_request_ != nullptr;
}
inline bool ServerMessage::has_search_request() const {
  return _internal_has_search_request();
}
inline void ServerMessage::clear_search_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.search_request_ != nullptr) {
    delete _impl_.search_request_;
  }
  _impl_.search_request_ = nullptr;
}
inline const ::SearchRequest& ServerMessage::_internal_search_request() const {
  const ::SearchRequest* p = _impl_.search_request_;
  return p != nullptr ? *p : reinterpret_cast<const ::SearchRequest&>(
      ::_SearchRequest_default_instance_);
}
inline const ::SearchRequest& ServerMessage::search_request() const {
  // @@protoc_insertion_point(field_get:ServerMessage.search_request)
  return _internal_search_request();
}
inline void ServerMessage::unsafe_arena_set_allocated_search_request(
    ::SearchRequest* search_request) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.search_request_);
  }
  _impl_.search_request_ = search_request;
  if (search_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ServerMessage.search_request)
}
inline ::SearchRequest* ServerMessage::release_search_request() {
  
  ::SearchRequest* temp = _impl_.search_request_;
  _impl_.search_request_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SearchRequest* ServerMessage::unsafe_arena_release_search_request() {
  // @@protoc_insertion_point(field_release:ServerMessage.search_request)
  
  ::SearchRequest* temp = _impl_.search_request_;
  _impl_.search_request_ = nullptr;
  return temp;
}
inline ::SearchRequest* ServerMessage::_internal_mutable_search_request() {
  
  if (_impl_.search_request_ == nullptr) {
    auto* p = CreateMaybeMessage<::SearchRequest>(GetArenaForAllocation());
    _impl_.search_request_ = p;
  }
  return _impl_.search_request_;
}
inline ::SearchRequest* ServerMessage::mutable_search_request() {
  ::SearchRequest* _msg = _internal_mutable_search_request();
  // @@protoc_insertion_point(field_mutable:ServerMessage.search_request)
  return _msg;
}
inline void ServerMessage::set_allocated_search_request(::SearchRequest* search_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.search_request_;
  }
  if (search_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(search_request);
    if (message_arena != submessage_arena) {
      search_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, search_request, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.search_request_ = search_request;
  // @@protoc_insertion_point(field_set_allocated:ServerMessage.search_request)
}

// .IndexReply index_reply = 4;
inline bool ServerMessage::_internal_has_index_reply() const {
  return this != internal_default_instance() && _impl_.index_reply_ != nullptr;
}
inline bool ServerMessage::has_index_reply() const {
  return _internal_has_index_reply();
}
inline void ServerMessage::clear_index_reply() {
  if (GetArenaForAllocation() == nullptr && _impl_.index_reply_ != nullptr) {
    delete _impl_.index_reply_;
  }
  _impl_.index_reply_ = nullptr;
}
inline const ::IndexReply& ServerMessage::_internal_index_reply() const {
  const ::IndexReply* p = _impl_.index_reply_;
  return p != nullptr ? *p : reinterpret_cast<const ::IndexReply&>(
      ::_IndexReply_default_instance_);
}
inline const ::IndexReply& ServerMessage::index_reply() const {
  // @@protoc_insertion_point(field_get:ServerMessage.index_reply)
  return _internal_index_reply();
}
inline void ServerMessage::unsafe_arena_set_allocated_index_reply(
    ::IndexReply* index_reply) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.index_reply_);
  }
  _impl_.index_reply_ = index_reply;
  if (index_reply) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ServerMessage.index_reply)
}
inline ::IndexReply* ServerMessage::release_index_reply() {
  
  ::IndexReply* temp = _impl_.index_reply_;
  _impl_.index_reply_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::IndexReply* ServerMessage::unsafe_arena_release_index_reply() {
  // @@protoc_insertion_point(field_release:ServerMessage.index_reply)
  
  ::IndexReply* temp = _impl_.index_reply_;
  _impl_.index_reply_ = nullptr;
  return temp;
}
inline ::IndexReply* ServerMessage::_internal_mutable_index_reply() {
  
  if (_impl_.index_reply_ == nullptr) {
    auto* p = CreateMaybeMessage<::IndexReply>(GetArenaForAllocation());
    _impl_.index_reply_ = p;
  }
  return _impl_.index_reply_;
}
inline ::IndexReply* ServerMessage::mutable_index_reply() {
  ::IndexReply* _msg = _internal_mutable_index_reply();
  // @@protoc_insertion_point(field_mutable:ServerMessage.index_reply)
  return _msg;
}
inline void ServerMessage::set_allocated_index_reply(::IndexReply* index_reply) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.index_reply_;
  }
  if (index_reply) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(index_reply);
    if (message_arena != submessage_arena) {
      index_reply = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, index_reply, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.index_reply_ = index_reply;
  // @@protoc_insertion_point(field_set_allocated:ServerMessage.index_reply)
}

// .SearchReply search_reply = 5;
inline bool ServerMessage::_internal_has_search_reply() const {
  return this != internal_default_instance() && _impl_.search_reply_ != nullptr;
}
inline bool ServerMessage::has_search_reply() const {
  return _internal_has_search_reply();
}
inline void ServerMessage::clear_search_reply() {
  if (GetArenaForAllocation() == nullptr && _impl_.search_reply_ != nullptr) {
    delete _impl_.search_reply_;
  }
  _impl_.search_reply_ = nullptr;
}
inline const ::SearchReply& ServerMessage::_internal_search_reply() const {
  const ::SearchReply* p = _impl_.search_reply_;
  return p != nullptr ? *p : reinterpret_cast<const ::SearchReply&>(
      ::_SearchReply_default_instance_);
}
inline const ::SearchReply& ServerMessage::search_reply() const {
  // @@protoc_insertion_point(field_get:ServerMessage.search_reply)
  return _internal_search_reply();
}
inline void ServerMessage::unsafe_arena_set_allocated_search_reply(
    ::SearchReply* search_reply) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.search_reply_);
  }
  _impl_.search_reply_ = search_reply;
  if (search_reply) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ServerMessage.search_reply)
}
inline ::SearchReply* ServerMessage::release_search_reply() {
  
  ::SearchReply* temp = _impl_.search_reply_;
  _impl_.search_reply_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SearchReply* ServerMessage::unsafe_arena_release_search_reply() {
  // @@protoc_insertion_point(field_release:ServerMessage.search_reply)
  
  ::SearchReply* temp = _impl_.search_reply_;
  _impl_.search_reply_ = nullptr;
  return temp;
}
inline ::SearchReply* ServerMessage::_internal_mutable_search_reply() {
  
  if (_impl_.search_reply_ == nullptr) {
    auto* p = CreateMaybeMessage<::SearchReply>(GetArenaForAllocation());
    _impl_.search_reply_ = p;
  }
  return _impl_.search_reply_;
}
inline ::SearchReply* ServerMessage::mutable_search_reply() {
  ::SearchReply* _msg = _internal_mutable_search_reply();
  // @@protoc_insertion_point(field_mutable:ServerMessage.search_reply)
  return _msg;
}
inline void ServerMessage::set_allocated_search_reply(::SearchReply* search_reply) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.search_reply_;
  }
  if (search_reply) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(search_reply);
    if (message_arena != submessage_arena) {
      search_reply = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, search_reply, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.search_reply_ = search_reply;
  // @@protoc_insertion_point(field_set_allocated:ServerMessage.search_reply)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ServerMessage_MessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ServerMessage_MessageType>() {
  return ::ServerMessage_MessageType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_serverMessages_2eproto
